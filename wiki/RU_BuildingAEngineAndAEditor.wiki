#summary Собираем Ængine и Æditor.
#labels Featured,Category-Deploy,Language-Russian

_Инструкция по сборке Ængine и Æditor.
Обновленная, исправленная и дополненная версия от 25 февраля 2008 года._

||Прежде всего, успешных попыток собрать Ængine на 64-битных системах не было. Неудачные были. По этой причине официально заявляю, что Ængine Dev Preview 1 пока 64-битные системы не поддерживает. Будем работать над этим в будущих версиях.||

==Часть 1. Lightfeather.==
Если стоял старый Lightfeather, сносим его нафиг.

Качаем снапшот lightfeather и его экстрасы из раздела downloads у нас на сайте. Экстрасы распаковываем в папку *lightfeather/exts*.

Затем, собираем lightfeather:
{{{
buildsys -l lightfeather.build
autoreconf --force --install
}}}
Затем
{{{
./configure --enable-cgshaders=no
}}}
если у вас стоит [http://developer.nvidia.com/object/cg_toolkit.html nvidia toolkit], то можно просто:
{{{
./configure
}}}

Из ридми:
||NOTE: Due to age-old problems in libtool that never seem to get fixed, the dynamic library file COULD be missing the .so extension depending on your version. To get the correct filename, run ./fixtools.sh after the ./configure step||
далее обычные
{{{
make
make install
}}}

make install не совсем правильно устанавливает заголовки.Проверяем чтобы в */usr/local/include* (или там куда поставили заголовки lightfeather) заголовки LF совпадали с содержимым папки include из самого lightfeather. Проверяем, также, чтобы были установлены инклуды freetype, nx++ и ngpcore.

Практика показала, что проблемы могут возникнуть, если в пути к исходникам есть папки, имена которых содержат пробелы. В чем проблема, я разбираться не стал. Убирание пробела решило проблемы.

Предположительно, все должно собраться и поставиться. Если возникнут проблемы - пишите.

Как вариант - можно скачать с нашего сайта собранный Lightfeather (собран под 32-битной Ubuntu 7.10).

==Часть 2. PhysX SDK.==
Качаем с [http://opengamestudio.org нашего сайта] PhysX SDK 2.6.2. Учтите, что скачивая его у нас, вы соглашаетесь с условиями лицензии Ageia (текст приведен вместе с файлом).

Распаковываем этот архив куда-нибудь.

На официальном сайте Ageia этой версии уже нет, а работа с новой версией SDK на данный момент никак не проверялась.

==Часть 3. Ængine.==
Предполагаю, что у вас свежая и чистая копия svn (на момент написания инструкции 294-я ревизия).

Затем идем в *trunk/aengine*
{{{
cmake -D OGS_USE_PHYSX=TRUE -D OGS_PHYSX_INC=<путь к папке novodex> .
make
make install
}}}

==Часть 4. Æditor.==

Идем в *trunk/aeditor*

выполняем
{{{
cmake .
make
./setup_userconfig.sh
}}}

Если все собирается нормально, запускаем редактор:
{{{
./aeditor
}}}

Должно появиться окно редактора, содержащее работающие рендер и lua-консоль. Кнопками на панельке можно добавлять объекты. Левым кликом объекты выделяются, правым - вызывается контекстное меню. Более подробно с возможностями редактора можно ознакомиться методом научного тыка. :)